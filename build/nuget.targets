<?xml version="1.0" encoding="utf-8"?>
<!-- This file builds the Enterprise Library Application Blocks  -->
<!-- and runs the unit tests.                                    -->
<Project xmlns="http://schemas.microsoft.com/developer/msbuild/2003"
    ToolsVersion="4.0" >

  <PropertyGroup>
    <NuGetExeDirectory>$(MSBuildThisFileDirectory)bin\</NuGetExeDirectory>
    <NuGetExePath>$(NuGetExeDirectory)nuget.exe</NuGetExePath>
    <BuildNugetPackages>true</BuildNugetPackages>
  </PropertyGroup>

  <ItemGroup>
    <NuSpecFiles Include="$(SourceRoot)**\*.nuspec" Exclude="$(SourceRoot)packages\**\*.nuspec"/>
  </ItemGroup>

  <Target Name="RestoreNugetPackages" DependsOnTargets="_DownloadNuGet">
    <Exec Command="&quot;$(NuGetExePath)&quot; restore &quot;%(Solutions.FullPath)&quot; -NonInteractive"/>
    <Exec Command="&quot;$(NuGetExePath)&quot; restore packages.config -PackagesDirectory packages -NonInteractive"/>
  </Target>

  <Target Name="BuildNugetPackages" DependsOnTargets="_DownloadNuget;_GetPackageVersions;_BuildPackageVersionTokens"
          Condition=" '$(BuildNugetPackages)' == 'true' "
          Inputs="@(NuSpecFiles)" Outputs="%(NuSpecFiles.Identity)-runalways">

    <PropertyGroup>
      <SourceRootFullPath>$([System.IO.Path]::GetFullPath('$(SourceRoot)'))</SourceRootFullPath>
      <PackageBasePath>$(SourceRootFullPath.TrimEnd('\'))</PackageBasePath>
      <PackageOutputDir Condition=" '$(PackageOutputDir)' == '' ">$([System.IO.Path]::GetFullPath('$(RepoRoot)bin\$(Configuration)\Nuget'))</PackageOutputDir>
    </PropertyGroup>

    <PropertyGroup>
      <_NuGetPackTarget>$([System.IO.Path]::GetDirectoryName("%(NuSpecFiles.FullPath)"))\%(NuSpecFiles.Filename).csproj</_NuGetPackTarget>
      <_NuGetPackTarget Condition=" !Exists('$(_NuGetPackTarget)') ">%(NuSpecFiles.FullPath)</_NuGetPackTarget>
    </PropertyGroup>

    <MakeDir Directories="$(PackageOutputDir)" Condition="!Exists($(PackageOutputDir))"/>

    <Exec Command="&quot;$(NuGetExePath)&quot; pack &quot;$(_NuGetPackTarget)&quot; -Properties Configuration=$(Configuration);@(_VersionTokens) -NonInteractive -OutputDirectory &quot;$(PackageOutputDir)&quot; -Symbols -BasePath &quot;$(PackageBasePath)&quot;"
          IgnoreStandardErrorWarningFormat="true"/>

  </Target>

  <Target Name="CleanNugetPackages">

    <PropertyGroup>
      <PackageOutputDir Condition=" '$(PackageOutputDir)' == '' ">$([System.IO.Path]::GetFullPath('$(RepoRoot)bin\$(Configuration)\Nuget'))</PackageOutputDir>
    </PropertyGroup>
    
    <ItemGroup>
      <Packages Include="$(PackageOutputDir)\*.nupkg"/>
    </ItemGroup>

    <Message Text="@(Packages)"/>
    <Delete Files="@(Packages)"/>
            
  </Target>

  <Target Name="_GetPackageVersions">

    <ItemGroup>
      <OutputBinaries Include="$(OutputRoot)*.dll;$(OutputRoot)*.exe"/>
    </ItemGroup>

    <GetAssemblyVersion VersionProviderPaths="@(OutputBinaries)">
      <Output TaskParameter="Versions" ItemName="AssemblyVersions"/>
    </GetAssemblyVersion>

    <Message Importance="high" Text="Versions found: @(AssemblyVersions)"/>

  </Target>

  <Target Name="_BuildPackageVersionTokens" Inputs="@(AssemblyVersions)" Outputs="%(Identity)">
    <!-- Using target batching to be able to do transformations on the metadata values -->
    <PropertyGroup>
      <AssemblyToken>%(AssemblyVersions.Identity)</AssemblyToken>
      <AssemblyToken>$(AssemblyToken.Replace(".", "_"))</AssemblyToken>
      <AssemblyToken>$(AssemblyToken.Replace("-", "_"))</AssemblyToken>
    </PropertyGroup>

    <ItemGroup>
      <_VersionTokens Include="$(VersionTokens)$(AssemblyToken)_Version=%(AssemblyVersions.InformationalVersion)"/>
    </ItemGroup>
  </Target>

  <Target Name="_DownloadNuGet" Condition="!Exists('$(NuGetExePath)')">
    <MakeDir Directories="$(NuGetExeDirectory)" Condition="!Exists('$(NuGetExeDirectory)')"/>
    <DownloadNuGet OutputFilename="$(NuGetExePath)" />
  </Target>

  <UsingTask TaskName="DownloadNuGet" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <OutputFilename ParameterType="System.String" Required="true" />
    </ParameterGroup>
    <Task>
      <Reference Include="System.Core" />
      <Using Namespace="System" />
      <Using Namespace="System.IO" />
      <Using Namespace="System.Net" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                try
                {
                    OutputFilename = Path.GetFullPath(OutputFilename);

                    Log.LogMessage("Downloading latest version of NuGet.exe to " + OutputFilename);
                    WebClient webClient = new WebClient();
                    webClient.DownloadFile("https://www.nuget.org/nuget.exe", OutputFilename);

                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>

  <UsingTask TaskName="GetAssemblyVersion" TaskFactory="CodeTaskFactory" AssemblyFile="$(MSBuildToolsPath)\Microsoft.Build.Tasks.v4.0.dll">
    <ParameterGroup>
      <VersionProviderPaths ParameterType="Microsoft.Build.Framework.ITaskItem[]" Required="true" />
      <Versions ParameterType="Microsoft.Build.Framework.ITaskItem[]" Output="true" />
    </ParameterGroup>
    <Task>
      <Using Namespace="System" />
      <Using Namespace="System.Reflection" />
      <Using Namespace="Microsoft.Build.Framework" />
      <Using Namespace="Microsoft.Build.Utilities" />
      <Code Type="Fragment" Language="cs">
        <![CDATA[
                var versions = new List<ITaskItem>();
                try
                {
                    foreach(var versionProviderPath in VersionProviderPaths)
                    {
                        var assembly = Assembly.LoadFrom(versionProviderPath.GetMetadata("Fullpath"));
                        var assemblyName = assembly.GetName();
                        var version = assemblyName.Version;
                        var fileVersionAttribute = assembly.GetCustomAttribute<AssemblyFileVersionAttribute>();
                        var informationalVersionAttribute = assembly.GetCustomAttribute<AssemblyInformationalVersionAttribute>();

                        var item = new TaskItem(assemblyName.Name);
                        item.SetMetadata("AssemblyVersion", version.ToString());
                        item.SetMetadata("FileVersion", fileVersionAttribute != null ? fileVersionAttribute.Version : string.Empty);
                        item.SetMetadata("InformationalVersion", informationalVersionAttribute != null ? informationalVersionAttribute.InformationalVersion : string.Empty);

                        versions.Add(item);
                    }

                    Versions = versions.ToArray();
                    return true;
                }
                catch (Exception ex) {
                    Log.LogErrorFromException(ex);
                    return false;
                }
            ]]>
      </Code>
    </Task>
  </UsingTask>

</Project>